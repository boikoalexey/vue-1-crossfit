:root {
  --color-dark: #000000;
  --color-dark-alternate: #131619;
  --color-light: #FFFFFF;
  --color-dark-gray: #404040;
  --color-light-gray: #C4C4C4;

  --border-radius: 30px;
  --border: 1px solid var(--color-light);

  --font-family-base: 'Heebo', sans-serif;
  --font-family-accent: 'Yantramanav', sans-serif;

  --input-height: 54px;

  --main-container-width: 1920px;
  --container-width: 1300px;
  --container-padding-x: 15px;

  --header-height: 90px;

  --transition-duration: 0.2s;
}

body {
  font-family: var(--font-family-base);
  font-size: 16px;
  line-height: 1.75;
  color: var(--color-light-gray);
  background-color: var(--color-dark);
  font-synthesis: none;
  text-rendering: optimizelegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.main-container {
  max-width: var(--main-container-width);
  margin-inline: auto;
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.title-medium {
  font-size: clamp(20px, 2.08vw, 40px);
  line-height: 1.3;
}

.title-big {
  font-size: clamp(24px, 3.12vw, 60px);
}

.backdrop-title {
  position: relative;
  z-index: 2;
}

.backdrop-title::before {
  content: '';
  position: absolute;
  top: 4px;
  right: calc(100% + 8px);
  aspect-ratio: 1;
  width: 26px;
  background: url('./assets/icons/plus.svg') center/contain no-repeat;
}

.backdrop-title::after {
  content: attr(data-title);
  position: absolute;
  z-index: -1;
  top: -0.43em;
  left: -0.6em;
  font-family: var(--font-family-accent);
  font-size: 2.8em;
  color: transparent;
  opacity: 0.3;
  -webkit-text-stroke: 1px var(--color-light-gray);
}

.backdrop-title.centered::after {
  top: -0.55em;
  left: 50%;
  translate: -50% 0;
}

.visually-hidden {
  position: absolute !important;
  overflow: hidden !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  padding: 0 !important;
  white-space: nowrap !important;
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  clip-path: inset(100%) !important;
}

a,
button,
input,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  color: var(--color-light);
}

a:hover {
  color: var(--color-light-gray);
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  text-transform: uppercase;
  color: var(--color-light);
}

.button {
  display: inline-flex;
  align-items: center;
  height: 38px;
  padding-inline: 26px;
  font-size: 12px;
  font-weight: 700;
  line-height: 2;
  letter-spacing: 1.2px;
  white-space: nowrap;
  text-decoration: none;
  text-transform: uppercase;
  background-color: var(--color-light);
  border: none;
  border-radius: var(--border-radius);
}

.button:hover {
  background-color: var(--color-light-gray);
}

.button.transparent {
  position: relative;
  height: var(--input-height);
  padding-left: 31px;
  padding-right: 80px;
  color: var(--color-light);
  background-color: transparent;
  border: var(--border);
}

.button.transparent::after {
  content: '';
  position: absolute;
  right: 0;
  aspect-ratio: 1;
  height: 100%;
  background: url('./assets/icons/bold-arrow-top-right.svg') center/70% no-repeat;
  border: var(--border);
  border-radius: 50%;
}

.button.transparent:hover {
  color: var(--color-dark);
  background-color: var(--color-light-gray);
}

.input {
  width: 100%;
  height: var(--input-height);
  padding-inline: 25px;
  color: var(--color-light);
  background-color: transparent;
  border: 1px solid var(--color-light-gray);
  border-radius: var(--border-radius);
}

.input::placeholder {
  color: var(--color-light-gray);
}

.input:hover {
  border-color: var(--color-light);
}

.input:focus {
  color: var(--color-dark);
  background-color: var(--color-light-gray);
  outline: none;
}

@media (width <= 767px) {
  .button {
    padding-inline: 18px;
  }
}

@font-face {
  font-family: 'Heebo';
  src: url('./assets/fonts/Heebo-Bold.woff2') format('woff2');
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Heebo';
  src: url('./assets/fonts/Heebo-Light.woff2') format('woff2');
  font-weight: 300;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'Yantramanav';
  src: url('./assets/fonts/Yantramanav-Bold.woff2') format('woff2');
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}

/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure, fieldset):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class], :last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}


/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;

  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;

  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not(
  [fill="none"],
  [fill^="url"]
)) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not(
  [stroke="none"],
  [stroke^="url"]
)) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-color: currentColor;
  border-collapse: collapse;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    transition-duration: 0.01ms !important;
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    scroll-behavior: auto !important;
  }
}